<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components associated with traits such as
      attributes, skills, special abilities, etc.
-->

<document signature="Hero Lab Structure">

  <!-- Trait component
        All traits derive from this component and share these mechanisms in common
  -->
  <component
    id="Trait"
    name="Trait"
    autocompset="no"
    hasshortname="yes"
    ispublic="no">

    <!-- Abbreviation for use in places like the TacCon -->
    <field
      id="trtAbbrev"
      name="Abbreviation"
      type="static"
      maxlength="5">
      </field>

    <!-- Minimum user-assigned value for the trait -->
    <field
      id="trtMinimum"
      name="Minimum Value"
      type="derived">
      </field>

    <!-- Maximum user-assigned value for the trait -->
    <field
      id="trtMaximum"
      name="Maximum Value"
      type="derived"
      defvalue="10">
      </field>

    <!-- User value assigned for the trait -->
    <field
      id="trtUser"
      name="User Value"
      type="user"
      usedelta="yes"
      maxfinal="50">
      <!-- Bound the user value to the limits established for the trait -->
      <bound phase="Ability" priority="1000" name="Bound trtUser">
        <before name="Calc trtFinal"/><![CDATA[
        @minimum = field[trtMinimum].value
        @maximum = field[trtMaximum].value
        ]]></bound>
      <!-- Final value for display is the fully adjusted net value that incorporates
            all adjustments from other sources
      -->
      <finalize><![CDATA[
        ~if we're in creation mode and not autonomous, we can't be modified
        if (hero.tagis[mode.creation] + !autonomous >= 2) then
          @text = "{bmp forbidden_up}"
        else
          @text = field[trtFinal].value
          endif
        ]]></finalize>
      </field>

    <!-- Bonuses applied to the trait (e.g. from other abilities) -->
    <field
      id="trtBonus"
      name="Bonus Value"
      type="derived">
      </field>

    <!-- In-play bonuses applied to the trait -->
    <field
      id="trtInPlay"
      name="In-Play Bonus"
      type="derived">
      </field>

    <!-- Final value for the trait -->
    <field
      id="trtFinal"
      name="Final Value"
      type="derived">
      <!-- Calculate the final value from the three distinct pieces -->
      <calculate phase="Ability" priority="3000" name="Calc trtFinal"><![CDATA[
        ~Note! If you change this calculation, you may need to change the similar
        ~       calculation in the "Derived" component.
        @value = field[trtUser].value + field[trtBonus].value + field[trtInPlay].value
        ]]></calculate>
      </field>

    <!-- Set the delta for the user value to be the current bonuses
        NOTE! This is necessary so incrementers have proper values when edited by the user.
        -->
    <eval index="1" phase="Render" priority="5000"><![CDATA[
      field[trtUser].delta = field[trtBonus].value + field[trtInPlay].value
      ]]></eval>

    <!-- If the trait is at its minimum/maximum, assign a tag to preclude further advancements -->
    <eval index="2" phase="Final" priority="5000"><![CDATA[
      ~base our test on the adjusted trait value, sans any in-play adjustments
      var trait as number
      trait = field[trtUser].value + field[trtBonus].value
      if (trait <= field[trtMinimum].value) then
        perform assign[Helper.Minimum]
      elseif (trait >= field[trtMaximum].value) then
        perform assign[Helper.Maximum]
        endif
      ]]></eval>

    </component>


  <!-- Attribute component
        Each attribute possessed by the actor derives from this component
  -->
  <component
    id="Ability"
    name="Ability"
    autocompset="no">

    <field
      id="aRaceBonus"
      name="Racial Bonus"
      type="derived">
      </field>

    <!-- <field
      id="aFinal"
      name="Final Ability Value"
      type="derived">
      </field> -->

    <identity group="IsAbility" />
    <identity group="PrimAbil" />
    <identity group="SecAbil" />
    <identity group="FocusAbil" />
    <identity group="DmgOver" />
    <identity group="WepAbility" />
    <identity group="RaceAbilBe" />
    <identity group="AbilityAdv" />

    <!-- Attributes have a minimum trait value of 1 -->
    <eval index="1" phase="Initialize" priority="3000">
        <after name="Bount trtUser" /><![CDATA[
      if (herofield[acStartAP].value = 0) then
        field[trtMinimum].value = -2
        field[trtMaximum].value = 4
      else
        field[trtMinimum].value = 0
        field[trtMaximum].value = 3
        endif
      ]]></eval>

    <!-- Each attribute point above one that is allocated by the user costs 7 CP -->
    <eval index="2" phase="Ability" priority="10000">
      <before name="Calc resLeft"/>
      <after name="Bound trtUser"/><![CDATA[
      doneif (#resmax[resAP] = 0)
      hero.child[resAP].field[resSpent].value += field[trtUser].value
      ]]></eval>

      <eval index="1" phase="Ability" priority="6000" name="Derived trtFinal"><![CDATA[
        field[trtFinal].value = field[trtUser].value + field[trtBonus].value + field[trtInPlay].value + field[aRaceBonus].value
        ]]></eval>

    </component>


  <!-- Skill component
        Each skill derives from this component
  -->
  <component
    id="Focus"
    name="Ability Focus"
    autocompset="no">

    <!-- Net final roll that includes the value of the linked attribute -->
    <field
      id="sklRoll"
      name="Net Skill Roll"
      type="derived">
      <calculate phase="Final" priority="5000">
        <after name="Calc trtFinal"/><![CDATA[
        ~only access the linkage if the skill is directly on the hero; if not, it is
        ~likely within an advancement gizmo and no linkage will exist there
        if (container.ishero <> 0) then
          @value = field[trtFinal].value + linkage[ability].field[trtFinal].value
          endif
        ]]></calculate>
      </field>

    <!-- Each skill is associated with a specific attribute that must be identified -->
    <linkage linkage="ability" optional="no"/>

    <!-- Each skill needs its own identity tag so existing skills can be identified during advancement -->
    <identity group="Focus"/>
    <identity group="RaceFocus" />
    <identity group="BackFocus" />
    <identity group="SpellTest" />
    <identity group="RaceFocBen" />
    <identity group="ClassFocus" />

    <!-- Every skill is shown on the "Rolls" mouse-over on the Dashboard/TacCon -->
    <tag group="DashTacCon" tag="Rolls"/>

    <!-- Track the skill on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Focus.?]
      ]]></eval>

    <eval index="2" phase="Setup" priority="5000"><![CDATA[
        ~Assign tag of linked attribute
        perform linkage[ability].pulltags[FocusAbil.?]


    ]]></eval>

    <eval index="3" phase="PostLevel" priority="3000">
        <after name="Bount trtUser" /><![CDATA[
        field[trtMinimum].value = 2
        field[trtMaximum].value = 2

        if (herofield[acLevel].value >= 11) then
            field[trtMaximum].value +=1
            endif
    ]]></eval>

    </component>


  <!-- Ability component
        Each special ability derives from this component
  -->
  <component
    id="Activation"
    name="Activation"
    autocompset="no">

    <!-- Activation state of ability - we're not activated by default -->
    <field
      id="abilActive"
      name="Is Activated?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>

    <!-- Setup an identity tag group to track all activated abilities and adjustments -->
    <identity group="Activated"/>


    <!-- If the ability is activated, designate it appropriately -->
    <eval index="3" phase="Setup" priority="100"><![CDATA[
      ~if we're not able to be activated, we don't qualify
      doneif (tagis[User.Activation] = 0)

      ~if we've been activated by the user, mark ourselves as activated; in addition,
      ~forward our identity tag to our parent actor; this allows the actor to track
      ~when abilities are activated and reflect the state to the user
      if (field[abilActive].value <> 0) then
        perform assign[Helper.Activated]
        perform forward[Activated.?]
        endif
      ]]></eval>

    </component>


  <!-- Derived component
        Each derived trait (calculated from other traits) is based upon this component
  -->
  <component
    id="Derived"
    name="Derived Trait"
    autocompset="no">

    <!-- Derived traits are based on other traits. The "calculate" script on the
        "trtFinal" field value will work great for most traits, but NOT for derived
        traits. Consequently, derived traits need to re-calculate the field value AFTER
        the traits derived from are properly calculated. So the individual calculation
        scripts for each derived trait must occur AFTER the initial "trtFinal"
        calculation and BEFORE this derived calculation. We can also omit any "user"
        value from the calculation since derived traits have no user-defined facet.
        -->
    <eval index="1" phase="Ability" priority="6000" name="Derived trtFinal"><![CDATA[
      field[trtFinal].value = field[trtBonus].value + field[trtInPlay].value
      ]]></eval>

    </component>


  <!-- Race component
        Each race derives from this component
  -->
  <component
    id="Race"
    name="Race"
    autocompset="no">

    <field
      id="rACC"
      name="Racial Accuracy"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rCOM"
      name="Racial Communications"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rCON"
      name="Racial Constitution"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rDEX"
      name="Racial Dexterity"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rFIG"
      name="Racial Fighting"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rINT"
      name="Racial Intelligence"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rPER"
      name="Racial Perception"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rSTR"
      name="Racial Strength"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rWILL"
      name="Racial Willpower"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="rSpeed"
      name="Racial Speed Modifier"
      type="derived">
      </field>

    <!-- Each race needs its own identity tag to configure the hero appropriately -->
    <identity group="Race"/>

    <!-- Track the race on the actor by assigning the appropriate tag -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Race.?]
      ]]></eval>

    <eval index="2" phase="PreAbility" priority="5000"><![CDATA[
        ~assign the racial ability bonuses to the ability fields

        doneif (tagis[Helper.SecondRace] <> 0)
        #raceabilbonus[aACC, field[rACC].value]
        #raceabilbonus[aCOM, field[rCOM].value]
        #raceabilbonus[aCON, field[rCON].value]
        #raceabilbonus[aDEX, field[rDEX].value]
        #raceabilbonus[aFIG, field[rFIG].value]
        #raceabilbonus[aINT, field[rINT].value]
        #raceabilbonus[aPER, field[rPER].value]
        #raceabilbonus[aSTR, field[rSTR].value]
        #raceabilbonus[aWILL, field[rWILL].value]


        ]]></eval>

    </component>

  <component
    id="Language"
    name="Language"
    autocompset="no">
    </component>

  <component
      id="Background"
      name="Background"
      autocompset="no">

      <identity group="Background" />

      <eval index="1" phase="Setup" priority="5000"><![CDATA[
        perform forward[Background.?]
        ]]></eval>
    </component>

    <component
        id="Social"
        name="Social Class"
        autocompset="no">

        <identity group="Social" />
        <identity group="BackType" />

        <eval index="1" phase="Setup" priority="5000"><![CDATA[
          perform forward[Social.?]
          ]]></eval>
      </component>

    <component
        id="Talent"
        name="Talent"
        autocompset="no">

        <identity group="Talent" />
        <identity group="StartTal" />

        <eval index="1" phase="Setup" priority="5000"><![CDATA[
            perform forward[Talent.?]
            ]]></eval>
        </component>

    <component
      id="Class"
      name="Class">

      <field
        id="cStartHP"
        name="Starting HP"
        type="derived">
        </field>

      <field
        id="cHP1"
        name="Class HP Level 1"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP1"
        name="Class MP Level 1"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP2"
        name="Class HP Level 2"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP2"
        name="Class MP Level 2"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP3"
        name="Class HP Level 3"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP3"
        name="Class MP Level 3"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP4"
        name="Class HP Level 4"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP4"
        name="Class MP Level 4"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP5"
        name="Class HP Level 5"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP5"
        name="Class MP Level 5"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP6"
        name="Class HP Level 6"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP6"
        name="Class MP Level 6"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP7"
        name="Class HP Level 7"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP7"
        name="Class MP Level 7"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP8"
        name="Class HP Level 8"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP8"
        name="Class MP Level 8"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP9"
        name="Class HP Level 9"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP9"
        name="Class MP Level 9"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cHP10"
        name="Class HP Level 10"
        type="user"
        maxvalue="6">
      </field>

      <field
        id="cMP10"
        name="Class MP Level 10"
        type="user"
        maxvalue="6">
      </field>

      <identity group="TalentFor" />
      <identity group="Class" />

      <eval index="1" phase="Setup" priority="5000"><![CDATA[
          ~forward tags to hero
          perform forward[Class.?]
          perform forward[PrimAbil.?]
          perform forward[SecAbil.?]


          ]]></eval>

      </component>

    <component
      id="AbilReq"
      name="Abilty Requirements"
      autocompset="no">

      <field
       id="reqACC"
        name="Required Accuracy"
        type="derived">
        </field>

      <field
       id="reqCOM"
        name="Required Communications"
        type="derived">
        </field>

      <field
       id="reqCON"
        name="Required Constitution"
        type="derived">
        </field>

      <field
       id="reqDEX"
        name="Required Dexterity"
        type="derived">
        </field>

      <field
       id="reqFIG"
        name="Required Fighting"
        type="derived">
        </field>

      <field
       id="reqINT"
        name="Required Intelligence"
        type="derived">
        </field>

      <field
       id="reqPER"
        name="Required Perception"
        type="derived">
        </field>

      <field
       id="reqSTR"
        name="Required Strength"
        type="derived">
        </field>

      <field
       id="reqWILL"
        name="Required Willpower"
        type="derived">
        </field>

    <prereq message="Accuracy requirement not met.">
        <validate><![CDATA[
            @message = "Accuracy " & altthing.field[reqACC].value & " or higher required."
            ~verify whether we meet the accuracy requirement
            validif (#abilityvalue[aACC] >= altthing.field[reqACC].value)
            ]]></validate>
        </prereq>

    <prereq message="Communications requirement not met.">
        <validate><![CDATA[
            @message = "Communications " & altthing.field[reqCOM].value & " or higher required."
            ~verify whether we meet the communications requirement
            validif (#abilityvalue[aCOM] >= altthing.field[reqCOM].value)
            ]]></validate>
        </prereq>

    <prereq message="Constitution requirement not met.">
        <validate><![CDATA[
            @message = "Constitution " & altthing.field[reqCON].value & " or higher required."
            ~verify whether we meet the Constitution requirement
            validif (#abilityvalue[aCON] >= altthing.field[reqCON].value)
            ]]></validate>
        </prereq>

    <prereq message="Dexterity requirement not met.">
        <validate><![CDATA[
            @message = "Dexterity " & altthing.field[reqDEX].value & " or higher required."
            ~verify whether we meet the Dexterity requirement
            validif (#abilityvalue[aDEX] >= altthing.field[reqDEX].value)
            ]]></validate>
        </prereq>

    <prereq message="Fighting requirement not met.">
        <validate><![CDATA[
            @message = "Fighting " & altthing.field[reqFIG].value & " or higher required."
            ~verify whether we meet the Fighting requirement
            validif (#abilityvalue[aFIG] >= altthing.field[reqFIG].value)
            ]]></validate>
        </prereq>

    <prereq message="Intelligence requirement not met.">
        <validate><![CDATA[
            @message = "Intelligence " & altthing.field[reqINT].value & " or higher required."
            ~verify whether we meet the Intelligence requirement
            validif (#abilityvalue[aINT] >= altthing.field[reqINT].value)
            ]]></validate>
        </prereq>

    <prereq message="Perception requirement not met.">
        <validate><![CDATA[
            @message = "Perception " & altthing.field[reqPER].value & " or higher required."
            ~verify whether we meet the Perception requirement
            validif (#abilityvalue[aPER] >= altthing.field[reqPER].value)
            ]]></validate>
        </prereq>

    <prereq message="Strength requirement not met.">
        <validate><![CDATA[
            @message = "Strength " & altthing.field[reqSTR].value & " or higher required."
            ~verify whether we meet the strength requirement
            validif (#abilityvalue[aSTR] >= altthing.field[reqSTR].value)
            ]]></validate>
        </prereq>

    <prereq message="Willpower requirement not met.">
        <validate><![CDATA[
            @message = "Willpower " & altthing.field[reqWILL].value & " or higher required."
            ~verify whether we meet the Willpower requirement
            validif (#abilityvalue[aWILL] >= altthing.field[reqWILL].value)
            ]]></validate>
        </prereq>
   </component>

   <component
     id="ClassPower"
     name="Class Power"
     autocompset="no">

     </component>

   <component
     id="AbilityAdv"
     name="Ability Advancement">

     <eval index="1" phase="PostAbil" priority="1000"><![CDATA[
         ~Set the cost of each ability
         perform hero.findchild[Ability,tagids[AbilityAdv.?]].setfocus


         ]]></eval>

     </component>

   <component
     id="ClassSpec"
     name="Class Specialization"
     autocompset="no">

     <identity group="TalentFor" />

     </component>

  <component
    id="Spell"
    name="Spell">

    </component>

  <component
    id="WepGroup"
    name="Weapon Group"
    autocompset="no">
    <identity group="WepGroup" />
    <identity group="WepGroRac" />
    <identity group="WepGrClass" />

    <eval index="1" phase="Setup" priority="5000"><![CDATA[
        ~forward group tags to hero
        perform forward[WepGroup.?]


        ]]></eval>

    </component>

    <!--  The Raciel Benefit component will mostly be used for selectable racial
          ability score bonuses, racial focuses and weapon groups should be able
          to be added directly -->
    <component
      id="RacialBen"
      name="Racial Benefit">

      <identity group="RaceBen" />
      <identity group="RaceGain" />

      <eval index="1" phase="PreAbility" priority="5000"><![CDATA[
          ~Give a bonus to associated ability score
          hero.findchild[Ability, tagids[RaceAbilBe.?,"|"]].field[aRaceBonus].value += 1


          ]]></eval>

      </component>

    <component
      id="RaceSpec"
      name="Racial Special"
      autocompset="no">

      </component>

    <component
      id="spFields"
      name="Special fields"
      autocompset="no">

    <field
        id="spValue1"
        name="spValue1"
        type="derived">
    </field>

    <field
        id="spValue2"
        name="spValue2"
        type="derived">
    </field>

    <field
        id="spValue3"
        name="spValue3"
        type="derived">
    </field>

    <field
        id="spValue4"
        name="spValue4"
        type="derived">
    </field>

  </component>


  <!-- Define various component sets associated with the components defined above.
  -->

  <!-- No compsets are auto-defined for the component -->

  <!-- Attribute - all attributes derive from this compset -->
  <compset
    id="Ability"
    forceunique="yes">
    <compref component="Ability"/>
    <compref component="Trait"/>
    <compref component="CanAdvance"/>
    </compset>

  <!-- Skill - all skills derive from this compset -->
  <compset
    id="Focus">
    <compref component="Focus"/>
    <compref component="Domain"/>
    <!-- <compref component="CanAdvance"/> -->
    <compref component="Trait" />
    <compref component="spFields" />
    </compset>

  <!-- Ability - all abilities derive from this compset -->
  <!-- <compset
    id="Ability">
    <compref component="Ability"/>
    <compref component="Trait"/>
    <compref component="SpecialTab"/>
    <compref component="CanAdvance"/>
    </compset> -->

  <!-- Trait - all derived traits are based on this compset -->
  <compset
    id="Trait">
    <compref component="Derived"/>
    <compref component="Trait"/>
    </compset>

  <!-- Race - all races derive from this compset -->
  <compset
    id="Race"
    forceunique="yes">
    <compref component="Race"/>
    </compset>

  <compset
      id="Talent">
      <compref component="Talent" />
      <compref component="Activation"/>
      <compref component="AbilReq" />
      <compref component="spFields" />
      <!-- <compref component="SpecialTab"/> -->
  </compset>

  <compset
      id="ClassSpec">
      <compref component="ClassSpec" />
      <compref component="AbilReq" />
      <compref component="spFields" />
      <!-- <compref component="SpecialTab"/> -->
  </compset>

  <compset
      id="WepGroup"
      forceunique="yes">
      <compref component="WepGroup" />
  </compset>

  <compset
      id="Language"
      forceunique="yes">
      <compref component="Language" />
  </compset>

  <compset
      id="Social"
      forceunique="yes">
      <compref component="Social" />
  </compset>

  <compset
      id="Background"
      forceunique="yes">
      <compref component="Background" />
  </compset>

  <compset
      id="ClassPower">
      <compref component="ClassPower" />
      <compref component="Activation" />
      <compref component="spFields" />
      <compref component="SpecialTab"/>
  </compset>

  <compset
      id="RaceSpec">
      <compref component="RaceSpec" />
      <compref component="spFields" />
      <compref component="SpecialTab"/>

  </compset>

  </document>
